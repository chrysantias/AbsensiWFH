[{"E:\\absensi\\frontend\\src\\components\\Dashboard.js":"1","E:\\absensi\\frontend\\src\\App.js":"2","E:\\absensi\\frontend\\src\\components\\AbsenList.js":"3"},{"size":4953,"mtime":1682891877958,"results":"4","hashOfConfig":"5"},{"size":644,"mtime":1682891639713,"results":"6","hashOfConfig":"5"},{"size":1518,"mtime":1682938187999,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","suppressedMessages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"11","usedDeprecatedRules":"12"},"4tt0ct",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\absensi\\frontend\\src\\components\\Dashboard.js",["19","20","21"],[],"import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport jwt_decode from \"jwt-decode\";\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\n\r\nconst Dashboard = () => {\r\n    const [name, setName] = useState('');\r\n    const [token, setToken] = useState('');\r\n    const [expire, setExpired] = useState('');\r\n    const [file, setFile] = useState('');\r\n    const [date, setDate] = useState('');\r\n    const [preview, setPreview] = useState('');\r\n    const navigate = useNavigate();\r\n\r\n    const loadImage = (e) => {\r\n        const image = e.target.files[0];\r\n        setFile(image);\r\n        setPreview(URL.createObjectURL(image));\r\n    }\r\n\r\n    const saveAbsen = async (e) => {\r\n        e.prevenDefault();\r\n        const formData = new FormData();\r\n        formData.append(\"file\", file);\r\n        formData.append(\"name\", name);\r\n        formData.append(\"date\", date);\r\n        try {\r\n            await axios.post(\"http://localhost:5000/absen\", formData, {\r\n                headers: {\r\n                    \"Content-Type\": \"multipart/form-data\"\r\n                }\r\n            })\r\n            navigate(\"/\");\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        refreshToken();\r\n    }, []);\r\n\r\n\r\n    const refreshToken = async () => {\r\n        try {\r\n            const response = await axios.get('http://localhost:5000/token');\r\n            setToken(response.data.accessToken);\r\n            const decoded = jwt_decode(response.data.accessToken);\r\n            setName(decoded.name);\r\n            setExpired(decoded.exp);\r\n        } catch (error) {\r\n            if (error.response) {\r\n                navigate(\"/absensi\");\r\n            }\r\n        }\r\n    }\r\n\r\n    const axiosJWT = axios.create();\r\n\r\n    axiosJWT.interceptors.request.use(async (config) => {\r\n        const currentDate = new Date();\r\n        if (expire * 1000 < currentDate.getTime()) {\r\n            const response = await axios.get('http://localhost:5000/token');\r\n            config.headers.Authorization = `Bearer ${response.data.accessToken}`;\r\n            setToken(response.data.accessToken);\r\n            const decoded = jwt_decode(response.data.accessToken);\r\n            setName(decoded.name);\r\n            setExpired(decoded.exp);\r\n        }\r\n        return config;\r\n    }, (error) => {\r\n        return Promise.reject(error);\r\n    });\r\n\r\n\r\n    return (\r\n        <div className=\"container mt-5\">\r\n            <h3 className='bold'>Welcome Back, {name}! </h3>\r\n            <p className='title has-text-centered'>Absensi Karyawan WFH </p>\r\n            <div className=\"columns is-centered mt-5\">\r\n                <div className=\"column is-half\">\r\n                    <form onSubmit={saveAbsen}>\r\n                        <div className='field'>\r\n                            <label className='label'>Nama Karyawan</label>\r\n                            <div className=\"control\">\r\n                                <input type=\"text\" className='input' value={name} disabled />\r\n                            </div>\r\n                        </div>\r\n                        <div className='field'>\r\n                            <label className='label'>Tanggal</label>\r\n                            <div className=\"control\">\r\n                                <input type=\"date\" className='input' value={date} onChange={(e) => setDate(e.target.value)} />\r\n                            </div>\r\n                        </div>\r\n                        <div className='field'>\r\n                            <label className='label'>Bukti(screenshot)</label>\r\n                            <div className=\"control\">\r\n                                <div className=\"file\">\r\n                                    <label className=\"file-label\">\r\n                                        <input type=\"file\" className='file-input' onChange={loadImage} />\r\n                                        <span className='file-cta'>\r\n                                            <span className='file-label'>Choose a file.</span>\r\n                                        </span>\r\n                                    </label>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        {preview ? (\r\n                            <figure className='image is-128x128'>\r\n                                <img src={preview} alt=\"preview image\" />\r\n                            </figure>\r\n                        ) : (\r\n                            \"\"\r\n                        )\r\n                        }\r\n                        <div className='field'>\r\n                            <div className=\"control\">\r\n                                <button className='button is-info' >Save</button>\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default Dashboard",[],"E:\\absensi\\frontend\\src\\App.js",[],[],"E:\\absensi\\frontend\\src\\components\\AbsenList.js",[],[],{"ruleId":"22","severity":1,"message":"23","line":9,"column":12,"nodeType":"24","messageId":"25","endLine":9,"endColumn":17},{"ruleId":"26","severity":1,"message":"27","line":41,"column":8,"nodeType":"28","endLine":41,"endColumn":10,"suggestions":"29"},{"ruleId":"30","severity":1,"message":"31","line":110,"column":33,"nodeType":"32","endLine":110,"endColumn":74},"no-unused-vars","'token' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'refreshToken'. Either include it or remove the dependency array.","ArrayExpression",["33"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You donâ€™t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement",{"desc":"34","fix":"35"},"Update the dependencies array to be: [refreshToken]",{"range":"36","text":"37"},[1263,1265],"[refreshToken]"]